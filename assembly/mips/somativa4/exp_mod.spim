#we keep the main function to test it
.data
	new_line:  .asciiz "\n"
	invalid_message: .asciiz "Entradas invalidas.\n"
    not_prime: .asciiz "O modulo nao eh primo.\n"
    prime: .asciiz "Pode calcular o m√≥dulo\n"
    frase1: .asciiz "A exponencial modular "
    frase2: .asciiz " elevado a "
    frase3: .asciiz " (mod "
    frase4: .asciiz ") eh "
    frase5: .asciiz ".\n"
.text

# ----------------
result:
	li $v0, 4
	la $a0, frase1
	syscall
	
	li $v0,1
	la $a0,($s0)
	syscall
	
	li $v0, 4
	la $a0, frase2
	syscall
	
	li $v0,1
	la $a0,($s1)
	syscall
	
	li $v0, 4
	la $a0, frase3
	syscall
	
	li $v0,1
	la $a0,($s2)
	syscall
	
	li $v0, 4
	la $a0, frase4
	syscall
	
	li $v0, 1
	la $a0, ($s3)
	syscall
	
	li $v0, 4
	la $a0, frase5
	syscall
	
	b exit
#---------------------

invalid:
	li $v0, 4
	la $a0, invalid_message
	syscall
	j exit
# -------------------
exit:
	li $v0, 10
	syscall
# -----------
exit_for:
	jr $ra
# -----------
for:
	mul $t1, $t0, $t0
	bgt $t1, $s2, exit_for
	
	divu $s2, $t0
	mfhi  $v0
	
	beq $v0, $zero, is_not_prime
	
	addu $t0,$t0, 1
	j for
# -----------
invalid_input:
	li $v0, 4
	la $a0, invalid_message
	syscall
	
	b exit
# -----------
is_not_prime:
	li $v0, 4
	la $a0, not_prime
	syscall
	
	b exit
# -----------
is_prime:
	ble $s2, 1, is_not_prime

	li $t0, 2
	li $v0, 1
	
	sw $ra, 12($sp)
	jal for
	lw $ra, 12($sp)
	
	jr $ra
# -----------
modular_exp:
    # $t0 = result

    li $t0, 1 # result = 1
	move $a0, $s0
	move $a1, $s1
	move $a2, $s2
	
    div $a0, $a2
    mfhi $a0  # base = base % mod

    beqz $a0, e0

    exp_loop:
        ble $a1, $zero, exit_mod
        andi $t1, $a1, 1
        beqz $t1, e_even

            mul $t0, $t0, $a0
            remu $t0, $t0, $a2

        e_even:
            srl $a1, $a1, 1
            mul $a0, $a0, $a0
            remu $a0, $a0, $a2
            j exp_loop

    e0:
        li $v0, 0
        jr $ra

    exit_mod:
        move $v0, $t0
        move $s3, $t0
        jr $ra
# -------------------------------------------
.globl main

main:
	li $v0, 5
	syscall
	move $s0, $v0
	
	li $v0, 5
	syscall
	move $s1, $v0
	
	li $v0, 5
	syscall
	move $s2, $v0
	
	#li $s0, 5
	#li $s1, 3
	#li $s2, 13
	
	blt $s0, 1,invalid
	blt $s1, 1,invalid
	blt $s2, 1,invalid		

	jal is_prime
	jal modular_exp
	j result
